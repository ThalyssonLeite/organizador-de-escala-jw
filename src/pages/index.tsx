/* eslint-disable react-hooks/rules-of-hooks */
import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useRef, useState } from 'react';
import Programation from '../components/Programation/Programation';
import S from './index.module.scss';

import { IDataProgramationLink } from './api/programation-data';
import WeeksManager from '../components/WeeksManager/WeeksManager';
import axios from 'axios';
import domToPdf from 'dom-to-pdf';
import classNames from 'classnames';

async function crawlDataFromJW(date: Date) {
  const resData = await fetch(`api/programation-data?date=${date}`);
  const dataProgamation: IDataProgramationLink = await resData.json();

  console.log(dataProgamation);

  return dataProgamation;
};

async function getMaxDateForWorkBooks(callback: (date: Date) => void) {
  const res = await fetch('api/find-final-date');
  const maxWorkbookDate = await res.text();

  console.log(maxWorkbookDate)

  return callback(new Date(maxWorkbookDate));
};

const Home: NextPage = (props: any) => {
  const localStorageKey = 'weeks';

  const [weeks, setWeeks] = useState<any>([]);
  const [loading, setLoading] = useState(false);
  const [maxDate, setMaxDate] = useState<Date | undefined>(undefined);

  useEffect(() => {
    const weeksStored = JSON.parse(localStorage.getItem(localStorageKey) || '[]');

    if (!weeksStored.length) return;

    setWeeks(weeksStored);
  }, []);

  useEffect(() => {
    getMaxDateForWorkBooks(setMaxDate);
  }, []);

  const onSelectDate = async (date: Date) => {
    setLoading(true);

    const data = await crawlDataFromJW(date);
    setLoading(false);

    const newWeeks = [
      ...weeks,
      {programation: data, date}
    ];


    localStorage.setItem(localStorageKey, JSON.stringify(newWeeks));
    setWeeks(newWeeks);
  };

  const onDeleteWeek = (i: number) => () => {
    const _weeks = [...weeks];
    _weeks.splice(i, 1);
    setWeeks(_weeks);
  };

  
  const $wrapper = useRef<any>(null);

  const downloadAsPDF = async (e: any) => {
    const width = 595.28;
    const height = 841.89;
    const $node = $wrapper.current;
    const options = {
      style: {
        minWidth: width,
        maxWidth: 'unset'
      },
      overrideWidth: 1000
    };

    $node.classList.add(S.toPrint);

    domToPdf($node, options, (pdf: any) => {
      $node.classList.remove(S.toPrint);
    })
  }

  return (
    <div className={S.appWrapper}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <WeeksManager
        weeks={weeks}
        setWeek={onSelectDate}
        loading={loading}
        removeWeek={onDeleteWeek}
        maxDate={maxDate}
      />

        <div className={S.programationWrapper} ref={$wrapper}>
          {weeks.map((data: any, i: number) => {
            return (
              <Programation
                key={data.date}
                index={i}
                data={data.programation}
                className={classNames({bordered: i % 2 !== 0})}
              />
            )
          })}
        </div>

      <button onClick={downloadAsPDF}>Salvar</button>
    </div>
  )
}

export default Home;
